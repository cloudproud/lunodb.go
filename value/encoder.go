// Code generated by go generate; DO NOT EDIT.
package value

import (
	"fmt"

	netip "net/netip"

	lunopb "github.com/cloudproud/lunodb.api/proto/types"
	"github.com/cloudproud/lunodb.go/types"
)

func Encode(val any, buf []byte) (_ *lunopb.Type, _ []byte, err error) {
	switch v := val.(type) {
	case string:
		buf, err = EncodeString(v, buf)
		return types.BasicString, buf, err
	case bool:
		buf, err = EncodeBool(v, buf)
		return types.BasicBool, buf, err
	case int8:
		buf, err = EncodeInt8(v, buf)
		return types.BasicInt8, buf, err
	case int16:
		buf, err = EncodeInt16(v, buf)
		return types.BasicInt16, buf, err
	case int32:
		buf, err = EncodeInt32(v, buf)
		return types.BasicInt32, buf, err
	case int64:
		buf, err = EncodeInt64(v, buf)
		return types.BasicInt64, buf, err
	case int:
		buf, err = EncodeInt64(v, buf)
		return types.BasicInt64, buf, err
	case uint8:
		buf, err = EncodeUint8(v, buf)
		return types.BasicUint8, buf, err
	case uint16:
		buf, err = EncodeUint16(v, buf)
		return types.BasicUint16, buf, err
	case uint32:
		buf, err = EncodeUint32(v, buf)
		return types.BasicUint32, buf, err
	case uint64:
		buf, err = EncodeUint64(v, buf)
		return types.BasicUint64, buf, err
	case float32:
		buf, err = EncodeFloat32(v, buf)
		return types.BasicFloat32, buf, err
	case float64:
		buf, err = EncodeFloat64(v, buf)
		return types.BasicFloat64, buf, err
	case netip.Prefix:
		buf, err = EncodeInet(v, buf)
		return types.BasicInet, buf, err
	case [16]byte:
		buf, err = EncodeUUID(v, buf)
		return types.BasicUUID, buf, err
	case map[string]any:
		buf, err = EncodeObject(v, buf)
		return types.BasicObject, buf, err
	case *string:
		buf, err = EncodeString(v, buf)
		return types.BasicString, buf, err
	case *bool:
		buf, err = EncodeBool(v, buf)
		return types.BasicBool, buf, err
	case *int8:
		buf, err = EncodeInt8(v, buf)
		return types.BasicInt8, buf, err
	case *int16:
		buf, err = EncodeInt16(v, buf)
		return types.BasicInt16, buf, err
	case *int32:
		buf, err = EncodeInt32(v, buf)
		return types.BasicInt32, buf, err
	case *int64:
		buf, err = EncodeInt64(v, buf)
		return types.BasicInt64, buf, err
	case *int:
		buf, err = EncodeInt64(v, buf)
		return types.BasicInt64, buf, err
	case *uint8:
		buf, err = EncodeUint8(v, buf)
		return types.BasicUint8, buf, err
	case *uint16:
		buf, err = EncodeUint16(v, buf)
		return types.BasicUint16, buf, err
	case *uint32:
		buf, err = EncodeUint32(v, buf)
		return types.BasicUint32, buf, err
	case *uint64:
		buf, err = EncodeUint64(v, buf)
		return types.BasicUint64, buf, err
	case *float32:
		buf, err = EncodeFloat32(v, buf)
		return types.BasicFloat32, buf, err
	case *float64:
		buf, err = EncodeFloat64(v, buf)
		return types.BasicFloat64, buf, err
	case *netip.Prefix:
		buf, err = EncodeInet(v, buf)
		return types.BasicInet, buf, err
	case []string:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicString), buf, err
	case []bool:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicBool), buf, err
	case []int8:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt8), buf, err
	case []int16:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt16), buf, err
	case []int32:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt32), buf, err
	case []int64:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt64), buf, err
	case []int:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt64), buf, err
	case []uint8:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint8), buf, err
	case []uint16:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint16), buf, err
	case []uint32:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint32), buf, err
	case []uint64:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint64), buf, err
	case []float32:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicFloat32), buf, err
	case []float64:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicFloat64), buf, err
	case []netip.Prefix:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInet), buf, err
	case [][16]byte:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUUID), buf, err
	case []map[string]any:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicObject), buf, err
	case []*string:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicString), buf, err
	case []*bool:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicBool), buf, err
	case []*int8:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt8), buf, err
	case []*int16:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt16), buf, err
	case []*int32:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt32), buf, err
	case []*int64:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt64), buf, err
	case []*int:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInt64), buf, err
	case []*uint8:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint8), buf, err
	case []*uint16:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint16), buf, err
	case []*uint32:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint32), buf, err
	case []*uint64:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicUint64), buf, err
	case []*float32:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicFloat32), buf, err
	case []*float64:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicFloat64), buf, err
	case []*netip.Prefix:
		buf, err = EncodeArray(v, buf)
		return types.NewArray(types.BasicInet), buf, err
	}

	return types.BasicAny, buf, fmt.Errorf("unsupported type: %T", val)
}
